import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;

    public class ResourceUI extends javax.swing.JFrame implements Form.FormListener {

        private ContactsTableModel model;
        private JTable contactsTable;
        private JScrollPane scroll;
        private Form form;
        private int deleteColumnNo;

        /**
         * Creates new form ContactsUI
         */
        public ResourceUI(ArrayList<Resource> c) {
            initComponents();
            model = new ContactsTableModel(c);
            contactsTable = new JTable(model);
            scroll = new JScrollPane(contactsTable);
            form = new Form(this);
            deleteColumnNo = model.getColumnCount() - 1;

            BoxLayout layout = new BoxLayout(getContentPane(), BoxLayout.Y_AXIS);
            setLayout(layout);
            form.setAlignmentX(CENTER_ALIGNMENT);
            contactsTable.setAlignmentX(CENTER_ALIGNMENT);

            add(form);
            add(Box.createRigidArea(new Dimension(0, 10)));
            add(contactsTable.getTableHeader());
            add(contactsTable);

            contactsTable.getSelectionModel().addListSelectionListener(new RowSelectionListener());
            TableColumn deleteColumn = contactsTable.getColumnModel().getColumn(deleteColumnNo);
            int deleteColumnWidth = 15;
            deleteColumn.setPreferredWidth(deleteColumnWidth);
            deleteColumn.setMinWidth(deleteColumnWidth);
            deleteColumn.setMaxWidth(deleteColumnWidth);
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setMinimumSize(new java.awt.Dimension(450, 350));
            setPreferredSize(new java.awt.Dimension(450, 350));
            getContentPane().setLayout(null);

            pack();
        }// </editor-fold>//GEN-END:initComponents

        @Override
        public void contactSaved(Resource c) {
            model.update();
        }

        @Override
        public void contactAdded(Resource c) {
            model.add(c);
        }


        private class ContactsTableModel extends AbstractTableModel {

            private ArrayList<Resource> contacts;
            private final String[] columnNames = {"First Name", "Skill", "Exp"};

            public ContactsTableModel(ArrayList<Resource> c) {
                contacts = c;
                if (contacts == null) {
                    contacts = new ArrayList<>();
                }
            }

            @Override
            public int getRowCount() {
                return contacts.size();
            }

            @Override
            public int getColumnCount() {
                return columnNames.length;
            }

            @Override
            public Object getValueAt(int r, int c) {
                Resource cn = contacts.get(r);
//                if (c >= 0 && c < columnNames.length - 1)
//                    return cn.values()[c];
                return "X";
            }

            public String getColumnName(int c) {
                return columnNames[c];
            }

            public Resource getContact(int i) {
                return contacts.get(i);
            }

            public void add(Resource c) {
                contacts.add(c);
                update();
            }

            public void delete(Resource c) {
                contacts.remove(c);
                update();
            }

            public void update() {
                fireTableDataChanged();
            }

        }

        private class RowSelectionListener implements ListSelectionListener {

            @Override
            public void valueChanged(ListSelectionEvent evt) {
                if (evt.getSource() == contactsTable.getSelectionModel()) {
                    if (contactsTable.getSelectedColumn() == deleteColumnNo) {
                        deleteContact(contactsTable.getSelectedRow());
                    } else selectContact(contactsTable.getSelectedRow());
                }
            }
        }

        private void selectContact(int i) {
            try {
                Resource c = model.getContact(i);
                form.setContact(c);
            } catch (IndexOutOfBoundsException ex) {

            }
        }

        private void deleteContact(int i) {
            try {
                Resource c = model.getContact(i);
                model.delete(c);
            } catch (IndexOutOfBoundsException ex) {

            }
        }


        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
    }
